@model DS.Motel.Clients.Web.Areas.Items.Models.Producto.AddViewModel
@using Kendo.Mvc.UI

<script type="text/javascript">

    $(document).ready(function () {
        $("#btnCancel").click(function () {
            $("#divMasterOperationAreaContent").load('@Url.Action("index", "Producto", new { area = "Items" })?masterload=false');
            $(document).scrollTop(0);
        });

        $(".custom-decimal").each(function () {
            $(this).ForceDecimalCulture();
        });

        $(".custom-decimal").on("focus", function () {
            var valText = $(this).val();
            var valTextParse = kendo.parseFloat(valText);
            if (valTextParse == 0)
                $(this).val("");
            else
                $(this).val(valText);
        });
        $(".custom-decimal").on("blur", function () {
            var valText = $(this).val();
            var valTextParse = kendo.parseFloat(valText);
            if (valTextParse != "" && valTextParse != null)
                $(this).val(valText);
            else
                $(this).val(0);
        });

        $("#Cantidad_Stock, #Costo_Total").change(function () {
            var cantidadStock = $("#Cantidad_Stock").val();
            var costoTotal = $("#Costo_Total").val();
            if (cantidadStock != null && costoTotal != null && cantidadStock != 0) {
                var total = kendo.parseFloat(costoTotal) / kendo.parseFloat(cantidadStock);
                $("#Costo_Unitario").val(total.toLocaleString());
            }
            else {
                $("#Costo_Unitario").val(0);
            }
        });
    });

    function Add_callOnBegin() {
        $("#btnAdd").attr("disabled", "disabled")
        $("#btnAdd").text("Guardando...");
    }

    function Add_onSuccess() {
        switch ('@Model.Result')
        {
            case '@DS.Motel.Clients.Web.Models.EnumActionResult.Saved':
                {
                    $.notify("El producto se guardó con exito", { globalPosition: "top center", className: "success" });
                    $("#divMasterOperationAreaContent").load('@Url.Action("Index", "Producto", new { area = "Items" })?masterload=false');
                }
                break;
            case '@DS.Motel.Clients.Web.Models.EnumActionResult.Validation':
                {
                    $.notify("Error: Información no válida", { globalPosition: "top center", className: "warn" });
                }
                break;
            case '@DS.Motel.Clients.Web.Models.EnumActionResult.Error':
                {
                    $.notify("Lo sentimos, un error desconocido ha ocurrido en la aplicación.", { globalPosition: "top center", className: "error" });
                }
                break;
            default:
                break;
        }
        $(document).scrollTop(0);
    }

    function FilterCategory() {
        return {
            categoriaId: $("#ddlCategoryId").val()
        };
    }

    function btnAddGrid_onClick() {
        var itemId = $('#ddlItemId').data("kendoDropDownList").value();
        var itemName = $('#ddlItemId').data("kendoDropDownList").text();
        var quantity = $('#txtCosto_Venta').val();
        
        if (itemId == '@Guid.Empty')
            $("#valItem").show();
        else
            $("#valItem").hide();

        if (quantity == "")
            $("#valCantidad").show();
        else
            $("#valCantidad").hide();

        if (itemId != '@Guid.Empty' && quantity != "") {
            var grid = $("#GridAddProducto").data("kendoGrid");
            var dataItem = grid.dataSource.get(itemId);
            if (dataItem == null) {
                grid.dataSource.add({
                    ItemId: itemId, Nombre: itemName, Cantidad: quantity, Index: grid.dataSource.data().length
                });
                $('#ddlItemId').data("kendoDropDownList").select(0);
                $('#txtCosto_Venta').val("");
            }
            else {
                alert("Ya existe el item en la lista");
            }
        }
    }

    function btnDeleteRow_onClick(index) {
        var grid = $("#GridAddProducto").data("kendoGrid");


        //Remove Line
        var gridData = grid.dataSource.at(index);
        grid.dataSource.remove(gridData);

        //Update Index
        for (var j = 0; j < grid.dataSource.data().length; j++) {
            var gridDataSource = grid.dataSource.data();
            gridDataSource[j].Index = j;
        }
        grid.refresh();
    }

</script>

<div id="divAddProducto">
    @using (@Ajax.BeginForm("Add", "Producto", new { area = "Items" }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "divAddProducto", OnBegin = "Add_callOnBegin", OnSuccess = "Add_onSuccess" }))
    {
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="col-md-12">
                <h1 style="margin:15px;">Agregar Producto</h1>
            </div>
        </div>
        <div class="col-md-12">
            <div class="box box-default">
                <div class="box-body">

                    <div class="row">
                        <div class="form-group col-md-6">
                            <label>Nombre</label>
                            @Html.TextBoxFor(m => m.Nombre, new { maxlength = "100", @class = "form-control", tabindex = "1" })
                            @Html.ValidationMessageFor(m => m.Nombre)
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-12">
                            <label>Descripción</label>
                            @Html.TextAreaFor(m => m.Descripcion, new { @class = "form-control", tabindex = "2" })
                            @Html.ValidationMessageFor(m => m.Descripcion)
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label>Categoría</label>
                            @(Html.Kendo().DropDownListFor(m => m.CategoriaId).DataTextField("Nombre").DataValueField("Id").HtmlAttributes(new { @class = "form-control", style = "width:100%;", tabindex = "3" })
                            .BindTo(Model.CategoriasProducto)
                                .Template("# var marginLeft = (Index*15) + 'px'; # " +
                                          "<div style='margin-left: #= marginLeft #'>#= Nombre #</div>"))
                            @Html.ValidationMessageFor(m => m.CategoriaId)
                        </div>
                        <div class="form-group col-md-6">
                            <label>Costo de Venta</label>
                            @Html.TextBoxFor(m => m.Costo_Venta, new { maxlength = "10", @class = "form-control custom-decimal", tabindex = "4" })
                            @Html.ValidationMessageFor(m => m.Costo_Venta)
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-12">
                            <label>Items que componen un producto</label>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-3">
                            <label>Categoría</label>
                            @(Html.Kendo().DropDownList().Name("ddlCategoryId").DataTextField("Nombre").DataValueField("Id").HtmlAttributes(new { @class = "form-control", style = "width:100%;", tabindex = "5" })
                                .Filter(FilterType.Contains)
                                .BindTo(Model.CategoriasItems)
                                    .Template("# var marginLeft = (Index*15) + 'px'; # " +
                                              "<div style='margin-left: #= marginLeft #'>#= Nombre #</div>"))
                        </div>
                        <div class="form-group col-md-3">
                            <label>Item</label>
                            @(Html.Kendo().DropDownList().Name("ddlItemId").DataTextField("Nombre").DataValueField("Id").HtmlAttributes(new { @class = "form-control", style = "width:100%;", tabindex = "6" })
                                .Filter(FilterType.Contains)
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("GetItems", "Producto").Data("FilterCategory");
                                    })
                                    .ServerFiltering(true);
                                })
                                .AutoBind(false)
                                .CascadeFrom("ddlCategoryId")
                            )
                            <span id="valItem" class="field-validation-error" style="display:none;">Por favor ingrese un item</span>
                        </div>

                        <div class="form-group col-md-3">
                            <label>Cantidad</label>
                            <div class="form-inline">
                                @Html.TextBox("txtCosto_Venta", "", new { maxlength = "10", @class = "form-control custom-decimal", tabindex = "7" })
                                <button type="button" class='btn btn-success' title="Agregar" onclick="btnAddGrid_onClick();" tabindex="8"><span class="glyphicon glyphicon-plus"></span></button>
                            </div>
                            <span id="valCantidad" class="field-validation-error" style="display:none;">Por favor ingrese una cantidad</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-12">
                            @(Html.Kendo().Grid(Model.Detalle).Name("GridAddProducto").TableHtmlAttributes(new { @class = "" })
                                    .Columns(column =>
                                    {
                                        column.Bound(c => c.Nombre).Title("Nombre").Width("calc(40%-120px)");
                                        column.Bound(c => c.Cantidad).Title("Cantidad").Width("20%");
                                        column.Bound(c => c).Title("Acciones").Width("120px").Sortable(false).Filterable(false).ClientTemplate(
                                            "<input type='hidden' name='Detalle[#:Index#].ItemId' value='#:ItemId#' /> " +
                                            "<input type='hidden' name='Detalle[#:Index#].Nombre' value='#:Nombre#' /> " +
                                            "<input type='hidden' name='Detalle[#:Index#].Cantidad' value='#:Cantidad#' /> " +
                                            "<input type='hidden' name='Detalle[#:Index#].Index' value='#:Index#' /> " +
                                            "<button type='button' class='btn btn-danger' title='Eliminar' onclick='btnDeleteRow_onClick(\"#:Index#\");'><span class='glyphicon glyphicon-remove'></span></button>"
                                        );
                                    })
                                    .Pageable(pageable => pageable.Enabled(false))
                                    .Filterable(filterable => filterable.Enabled(false))
                                    .Sortable(sortable => sortable.Enabled(false))
                                    .NoRecords(norecords => norecords.Template("No hay items"))
                                    .DataSource(source => source
                                        .Ajax()
                                        .Model(model => model.Id(c => c.ItemId))
                                     )
                            )
                            @Html.ValidationMessageFor(m => m.Detalle)
                        </div>
                    </div>
                </div>
                <div class="box-footer">
                    <button id="btnCancel" type="button" class="btn btn-secondary pull-right">Cancelar</button>
                    <button id="btnAdd" type="submit" class="btn btn-success pull-right" style="margin-right:15px;">Guardar</button>
                </div>
            </div>
        </div>
    }
</div>
